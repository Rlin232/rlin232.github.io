---
import '../styles/global.css';

interface Props {
	title: string;
	description?: string;
}

const { title, description = "Academic personal website" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="h-full">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/assets/img/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		<title>{title}</title>
	</head>
	<body class="min-h-full theme-transition">
		<div id="tsparticles" class="fixed inset-0 w-full h-full"></div>
		<div class="relative z-10 min-h-full">
			<nav class="border-b backdrop-blur-sm theme-transition" x-data="{ open: false }">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-16 items-center">
						<!-- Left side (Logo/Home) -->
						<div class="flex">
							<a href="/" class="flex items-center text-xl font-bold hover:text-accent-600 theme-transition">
								Home
							</a>
						</div>
	
						<!-- Desktop Menu (Hidden on small screens) -->
						<div class="hidden sm:flex space-x-8 items-center">
							<a href="/publications" class="hover:text-accent-600 theme-transition">Publications</a>
							<a href="/projects" class="hover:text-accent-600 theme-transition">Projects</a>
							<a href="/cv" class="hover:text-accent-600 theme-transition">CV</a>
							<button
								id="theme-toggle"
								type="button"
								class="theme-toggle-btn rounded-lg text-sm p-2.5 theme-transition"
							>
								<svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
									<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
								</svg>
								<svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
									<path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
								</svg>
							</button>
						</div>
	
						<!-- Hamburger Button (Only on small screens) -->
						<button @click="open = !open" class="sm:hidden p-2 rounded-lg focus:outline-none">
							<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
							</svg>
						</button>
					</div>
				</div>
	
				<!-- Mobile Menu (Hidden by default, shown when open=true) -->
				<div x-show="open" class="sm:hidden border-t">
					<a href="/publications" class="block px-4 py-2 hover:text-accent-600">Publications</a>
					<a href="/projects" class="block px-4 py-2 hover:text-accent-600">Projects</a>
					<a href="/cv" class="block px-4 py-2 hover:text-accent-600">CV</a>
				</div>
			</nav>
			
			<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<slot />
			</main>
		</div>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.8/cdn.min.js" defer></script>
		<script is:inline src="https://cdn.jsdelivr.net/npm/tsparticles-slim@2.0.6/tsparticles.slim.bundle.min.js"></script>
		<script is:inline>
			// Check for saved theme preference, otherwise use system preference
			if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}

			// Toggle theme function
			function toggleTheme() {
				// Toggle theme in localStorage and document
				if (localStorage.getItem('color-theme')) {
					if (localStorage.getItem('color-theme') === 'light') {
						document.documentElement.classList.add('dark');
						localStorage.setItem('color-theme', 'dark');
					} else {
						document.documentElement.classList.remove('dark');
						localStorage.setItem('color-theme', 'light');
					}
				} else {
					if (document.documentElement.classList.contains('dark')) {
						document.documentElement.classList.remove('dark');
						localStorage.setItem('color-theme', 'light');
					} else {
						document.documentElement.classList.add('dark');
						localStorage.setItem('color-theme', 'dark');
					}
				}
				
				// Update button icons
				updateThemeToggleButton();
			}

			// Update theme toggle button appearance
			function updateThemeToggleButton() {
				const darkIcon = document.getElementById('theme-toggle-dark-icon');
				const lightIcon = document.getElementById('theme-toggle-light-icon');

				if (document.documentElement.classList.contains('dark')) {
					darkIcon.classList.add('hidden');
					lightIcon.classList.remove('hidden');
				} else {
					lightIcon.classList.add('hidden');
					darkIcon.classList.remove('hidden');
				}
			}

			// Add click event listener to theme toggle button
			document.getElementById('theme-toggle').addEventListener('click', toggleTheme);

			// Initial button state
			updateThemeToggleButton();

			// Particles configuration
			document.addEventListener('DOMContentLoaded', async function() {
				try {
					await tsParticles.load("tsparticles", {
						fullScreen: {
							enable: false
						},
						background: {
							color: {
								value: "transparent"
							}
						},
						fpsLimit: 60,
						particles: {
							number: {
								value: 30,
								density: {
									enable: true,
									value_area: 800
								}
							},
							color: {
								value: "#f97316"
							},
							shape: {
								type: "circle"
							},
							opacity: {
								value: { min: 0.1, max: 0.3 },
								animation: {
									enable: true,
									speed: 1,
									sync: false
								}
							},
							size: {
								value: { min: 1, max: 3 }
							},
							links: {
								enable: true,
								distance: 150,
								color: "#f97316",
								opacity: 0.2,
								width: 1
							},
							move: {
								enable: true,
								speed: 1,
								direction: "none",
								random: true,
								straight: false,
								outModes: {
									default: "bounce"
								}
							}
						},
						interactivity: {
							detect_on: "canvas",
							events: {
								onHover: {
									enable: true,
									mode: "grab"
								},
								onClick: {
									enable: true,
									mode: "push"
								},
								resize: true
							},
							modes: {
								grab: {
									distance: 140,
									links: {
										opacity: 0.4
									}
								},
								push: {
									quantity: 4
								}
							}
						},
						detectRetina: true,
						themes: [
							{
								name: "light",
								default: {
									value: true,
									mode: "light"
								},
								options: {
									particles: {
										color: {
											value: "#f97316"
										},
										links: {
											color: "#f97316"
										}
									}
								}
							},
							{
								name: "dark",
								default: {
									value: true,
									mode: "dark"
								},
								options: {
									particles: {
										color: {
											value: "#fb923c"
										},
										links: {
											color: "#fb923c"
										}
									}
								}
							}
						]
					});

					// Update particles theme when toggling dark/light mode
					const updateParticlesTheme = () => {
						const container = tsParticles.domItem(0);
						if (container) {
							if (document.documentElement.classList.contains('dark')) {
								container.loadTheme("dark");
							} else {
								container.loadTheme("light");
							}
						}
					};

					// Add theme update to toggle function
					const originalToggleTheme = window.toggleTheme;
					window.toggleTheme = function() {
						originalToggleTheme();
						updateParticlesTheme();
					};

					// Initial theme
					updateParticlesTheme();
				} catch (error) {
					console.error("Error initializing particles:", error);
				}
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		/* Light theme colors */
		--bg-color: #ffffff;
		--text-color: #171717;
		--nav-bg: rgba(255, 247, 237, 0.8);
		--border-color: #e5e5e5;
		--panel-bg: rgba(255, 247, 237, 0.5);
		--accent-color: #f97316;
		--accent-hover: #ea580c;
		--toggle-text: #737373;
		--toggle-hover: #fff7ed;
		--toggle-ring: #fed7aa;
	}

	:root[class~="dark"] {
		/* Dark theme colors */
		--bg-color: #171717;
		--text-color: #f5f5f5;
		--nav-bg: rgba(38, 38, 38, 0.5);
		--border-color: #404040;
		--panel-bg: rgba(38, 38, 38, 0.5);
		--accent-color: #fb923c;
		--accent-hover: #fdba74;
		--toggle-text: #a3a3a3;
		--toggle-hover: rgba(234, 88, 12, 0.5);
		--toggle-ring: #9a3412;
	}

	.theme-transition {
		transition: background-color 300ms ease,
								border-color 300ms ease,
								color 300ms ease;
	}

	body {
		background-color: var(--bg-color);
		color: var(--text-color);
	}

	nav {
		background-color: var(--nav-bg);
		border-color: var(--border-color);
	}

	a:hover {
		color: var(--accent-hover);
	}

	.theme-toggle-btn {
		color: var(--toggle-text);
	}

	.theme-toggle-btn:hover {
		background-color: var(--toggle-hover);
	}

	.theme-toggle-btn:focus {
		outline: none;
		ring: 4px;
		ring-color: var(--toggle-ring);
	}

	/* Global link styles */
	:root {
		--link-color: #f97316;
		--link-color-dark: #fb923c;
		--link-hover-color: #ea580c;
		--link-hover-color-dark: #fdba74;
		--link-visited-color: #c2410c;
		--link-visited-color-dark: #ea580c;
	}

	/* Navigation links should keep their original styling */
	nav a {
		color: inherit;
	}

	/* Panel styles */
	.bg-neutral-50, .dark .bg-neutral-800 {
		background-color: var(--panel-bg) !important;
	}
</style>
